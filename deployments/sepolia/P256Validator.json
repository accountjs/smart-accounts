{
  "address": "0x9728C13F00AD41eC92bBB6d9edB99F69924b62eC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISecp256r1",
          "name": "_impl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "oldPk",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newPk",
          "type": "bytes"
        }
      ],
      "name": "PkChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "enable",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "impl",
      "outputs": [
        {
          "internalType": "contract ISecp256r1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pks",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "validCaller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateSignature",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec03f237a7c06963e84565310d9450ffcea9ce2db87f152f716521c6860cf4a6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x962F35D2249B069B38BbE169B2A449f823b8Bf79",
    "contractAddress": null,
    "transactionIndex": 34,
    "gasUsed": "515110",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x87896310d5a97d96ac579c442da7aad592834568f278c1a20df434098e92b2d3",
    "transactionHash": "0xec03f237a7c06963e84565310d9450ffcea9ce2db87f152f716521c6860cf4a6",
    "logs": [],
    "blockNumber": 4501153,
    "cumulativeGasUsed": "11435906",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb919d759B00D5501edACe18346353c0a1D7D159e"
  ],
  "numDeployments": 3,
  "solcInputHash": "d8accbfad6f64bb453cd9c6faf004ee1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISecp256r1\",\"name\":\"_impl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldPk\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newPk\",\"type\":\"bytes\"}],\"name\":\"PkChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"contract ISecp256r1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pks\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"validCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/validators/p256/P256Validator.sol\":\"P256Validator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/Contants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary Contants {\\n    address internal constant SENTINEL = address(0x1);\\n\\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\\n}\\n\",\"keccak256\":\"0x4def4c34ea7d1925f182376cda97a69c536491aa43ebadaaf710b58173f5f76b\",\"license\":\"MIT\"},\"contracts/interfaces/IValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Metadata.sol\\\";\\n\\ninterface IValidator is Metadata {\\n    function validateSignature(address account, bytes32 userOpHash, bytes calldata signature)\\n        external\\n        payable\\n        returns (uint256 validationData);\\n\\n    function validCaller(address caller, bytes calldata data) external view returns (bool);\\n\\n    function enable(bytes calldata data) external payable;\\n}\\n\",\"keccak256\":\"0x7c6a9305295ecdee128a434cc87514250605c3a3159ecd2dd3ee56dc9ce6f862\",\"license\":\"MIT\"},\"contracts/interfaces/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface Metadata is IERC165 {\\n    function NAME() external view returns (string memory);\\n    function VERSION() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcbcd27a057fef9d4c42f0e229575bd8fb28a8baad9440869bb30fcaefccc0729\",\"license\":\"MIT\"},\"contracts/validators/BaseValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IValidator.sol\\\";\\n\\nabstract contract BaseValidator is IValidator {\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return interfaceId == type(IValidator).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6bc845d709ba4b8925de3dd209016868ca59f6ede3c52c76d1f12a5783a04579\",\"license\":\"MIT\"},\"contracts/validators/p256/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        uint256 newlength = data.length * 8 / 6;\\n        if (data.length % 6 > 0) {\\n            newlength++;\\n        }\\n        string memory result = new string(newlength);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n            // let targetLength := add(resultPtr, newlength)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {} {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x2aa241e8e13cdb63bc886b6a5ab0d464af440e7019d15abf0dc0a67bd3fe7def\",\"license\":\"MIT\"},\"contracts/validators/p256/ISecp256r1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ISecp256r1 {\\n    function validateSignature(bytes32 message, bytes calldata signature, bytes calldata publicKey)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2c27d09b504eebfad02daf6a774b8df8bf29c51077f288bf6dd5464b4a18d177\",\"license\":\"MIT\"},\"contracts/validators/p256/P256Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"../../common/Contants.sol\\\";\\nimport \\\"../BaseValidator.sol\\\";\\nimport \\\"./ISecp256r1.sol\\\";\\nimport \\\"./Base64.sol\\\";\\n\\ncontract P256Validator is BaseValidator {\\n    string public constant override NAME = \\\"P256 Validator\\\";\\n    string public constant override VERSION = \\\"0.0.1\\\";\\n\\n    event PkChanged(address indexed account, bytes oldPk, bytes newPk);\\n\\n    ISecp256r1 public immutable impl;\\n    mapping(address => bytes) public pks;\\n\\n    constructor(ISecp256r1 _impl) {\\n        impl = _impl;\\n    }\\n\\n    function validateSignature(address account, bytes32 userOpHash, bytes calldata signature)\\n        external\\n        payable\\n        override\\n        returns (uint256 validationData)\\n    {\\n        if (impl.validateSignature(sha256(abi.encode(userOpHash)), signature, pks[account])) {\\n            return 0;\\n        }\\n        return Contants.SIG_VALIDATION_FAILED;\\n    }\\n\\n    function enable(bytes calldata data) external payable override {\\n        bytes memory old = pks[msg.sender];\\n        pks[msg.sender] = data;\\n        emit PkChanged(msg.sender, old, data);\\n    }\\n\\n    function validCaller(address, bytes calldata) external pure override returns (bool) {\\n        revert(\\\"not implemented\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x803005daa3a60608986a4dbad6abedd7d395b9f4ca02931d531cd19a60371d09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007157601f6108dd38819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b038116810361007157608052604051610850908161008d823960805181818161027e015261075a0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a714610473575081630c959556146102a25781638abf60771461025e5781639356375c14610213578163971604c6146101c05781639ea9bd591461013c57508063a3f4df7e146100e05763ffa1ad741461007d57600080fd5b346100dc57816003193601126100dc5780516100d89161009c8261052c565b600582527f302e302e31000000000000000000000000000000000000000000000000000000602083015251918291602083526020830190610649565b0390f35b5080fd5b50346100dc57816003193601126100dc5780516100d8916101008261052c565b600e82527f503235362056616c696461746f72000000000000000000000000000000000000602083015251918291602083526020830190610649565b905082346101bd57826003193601126101bd576101576104dc565b506024359067ffffffffffffffff82116101bd575060649261017e602092369085016104a9565b50505162461bcd60e51b815291820152600f60248201527f6e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152fd5b80fd5b9050606036600319011261020f576101d66104dc565b926044359067ffffffffffffffff82116101bd5750926101fe610208926020953691016104a9565b916024359061068f565b9051908152f35b8280fd5b5050346100dc5760203660031901126100dc5761024b816100d8936001600160a01b0361023e6104dc565b1681528060205220610580565b9051918291602083526020830190610649565b5050346100dc57816003193601126100dc57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b83836020928360031936011261020f5767ffffffffffffffff91813583811161046f576102d290369084016104a9565b90933386528587526102e5838720610580565b9333875286885283872091831161045c575061030181546104f2565b601f8111610419575b5085601f831160011461039057918697918161037f947f49a125229beaa1b288f0f807170a37c7a131925683b0250b113db84181bfb066989991610385575b508260011b906000198460031b1c19161790555b6103708451958587968752860190610649565b9184830390850152339661066e565b0390a280f35b90508801358a610349565b81875287872090601f198416885b8181106104025750917f49a125229beaa1b288f0f807170a37c7a131925683b0250b113db84181bfb06697989993918561037f9694106103e8575b5050600182811b01905561035d565b890135600019600385901b60f8161c1916905589806103d9565b91928a60018192868c01358155019401920161039e565b818752878720601f840160051c810191898510610452575b601f0160051c01905b818110610447575061030a565b87815560010161043a565b9091508190610431565b634e487b7160e01b875260419052602486fd5b8480fd5b84913461020f57602036600319011261020f573563ffffffff60e01b811680910361020f5763052a2cc960e01b14815260209150f35b9181601f840112156104d75782359167ffffffffffffffff83116104d757602083818601950101116104d757565b600080fd5b600435906001600160a01b03821682036104d757565b90600182811c92168015610522575b602083101461050c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610501565b6040810190811067ffffffffffffffff82111761054857604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761054857604052565b9060405191826000825492610594846104f2565b90818452600194858116908160001461060357506001146105c0575b50506105be9250038361055e565b565b9093915060005260209081600020936000915b8183106105eb5750506105be935082010138806105b0565b855488840185015294850194879450918301916105d3565b9150506105be94506020925060ff191682840152151560051b82010138806105b0565b60005b8381106106395750506000910152565b8181015183820152602001610629565b9060209161066281518092818552858086019101610626565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b92919091604091825194602086818098019687528181526106af8161052c565b6106c0865197889251928391610626565b8660009788928101039060025afa1561083657859182918651916001600160a01b038092168852878452610716878920918851978895630ae7e17f60e41b8752600487015260606024870152606486019161066e565b906003198483030160448501528891815491610731836104f2565b928383528660019d8e83169283600014610816575050506001146107da575b50505082809103917f0000000000000000000000000000000000000000000000000000000000000000165afa9283156107d15750839261079a575b5050610795575090565b905090565b90809250813d83116107ca575b6107b1818361055e565b810103126100dc575180151581036100dc57388061078b565b503d6107a7565b513d85823e3d90fd5b909192508952848920918a8a935b8285106107fd57505050018301828038610750565b805484860189015288978a9750909401938c91016107e8565b9196509392508594915060ff191683830152151560051b01019138610750565b50505051903d90823e3d90fdfea164736f6c6343000813000a",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a714610473575081630c959556146102a25781638abf60771461025e5781639356375c14610213578163971604c6146101c05781639ea9bd591461013c57508063a3f4df7e146100e05763ffa1ad741461007d57600080fd5b346100dc57816003193601126100dc5780516100d89161009c8261052c565b600582527f302e302e31000000000000000000000000000000000000000000000000000000602083015251918291602083526020830190610649565b0390f35b5080fd5b50346100dc57816003193601126100dc5780516100d8916101008261052c565b600e82527f503235362056616c696461746f72000000000000000000000000000000000000602083015251918291602083526020830190610649565b905082346101bd57826003193601126101bd576101576104dc565b506024359067ffffffffffffffff82116101bd575060649261017e602092369085016104a9565b50505162461bcd60e51b815291820152600f60248201527f6e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152fd5b80fd5b9050606036600319011261020f576101d66104dc565b926044359067ffffffffffffffff82116101bd5750926101fe610208926020953691016104a9565b916024359061068f565b9051908152f35b8280fd5b5050346100dc5760203660031901126100dc5761024b816100d8936001600160a01b0361023e6104dc565b1681528060205220610580565b9051918291602083526020830190610649565b5050346100dc57816003193601126100dc57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b83836020928360031936011261020f5767ffffffffffffffff91813583811161046f576102d290369084016104a9565b90933386528587526102e5838720610580565b9333875286885283872091831161045c575061030181546104f2565b601f8111610419575b5085601f831160011461039057918697918161037f947f49a125229beaa1b288f0f807170a37c7a131925683b0250b113db84181bfb066989991610385575b508260011b906000198460031b1c19161790555b6103708451958587968752860190610649565b9184830390850152339661066e565b0390a280f35b90508801358a610349565b81875287872090601f198416885b8181106104025750917f49a125229beaa1b288f0f807170a37c7a131925683b0250b113db84181bfb06697989993918561037f9694106103e8575b5050600182811b01905561035d565b890135600019600385901b60f8161c1916905589806103d9565b91928a60018192868c01358155019401920161039e565b818752878720601f840160051c810191898510610452575b601f0160051c01905b818110610447575061030a565b87815560010161043a565b9091508190610431565b634e487b7160e01b875260419052602486fd5b8480fd5b84913461020f57602036600319011261020f573563ffffffff60e01b811680910361020f5763052a2cc960e01b14815260209150f35b9181601f840112156104d75782359167ffffffffffffffff83116104d757602083818601950101116104d757565b600080fd5b600435906001600160a01b03821682036104d757565b90600182811c92168015610522575b602083101461050c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610501565b6040810190811067ffffffffffffffff82111761054857604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761054857604052565b9060405191826000825492610594846104f2565b90818452600194858116908160001461060357506001146105c0575b50506105be9250038361055e565b565b9093915060005260209081600020936000915b8183106105eb5750506105be935082010138806105b0565b855488840185015294850194879450918301916105d3565b9150506105be94506020925060ff191682840152151560051b82010138806105b0565b60005b8381106106395750506000910152565b8181015183820152602001610629565b9060209161066281518092818552858086019101610626565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b92919091604091825194602086818098019687528181526106af8161052c565b6106c0865197889251928391610626565b8660009788928101039060025afa1561083657859182918651916001600160a01b038092168852878452610716878920918851978895630ae7e17f60e41b8752600487015260606024870152606486019161066e565b906003198483030160448501528891815491610731836104f2565b928383528660019d8e83169283600014610816575050506001146107da575b50505082809103917f0000000000000000000000000000000000000000000000000000000000000000165afa9283156107d15750839261079a575b5050610795575090565b905090565b90809250813d83116107ca575b6107b1818361055e565b810103126100dc575180151581036100dc57388061078b565b503d6107a7565b513d85823e3d90fd5b909192508952848920918a8a935b8285106107fd57505050018301828038610750565b805484860189015288978a9750909401938c91016107e8565b9196509392508594915060ff191683830152151560051b01019138610750565b50505051903d90823e3d90fdfea164736f6c6343000813000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9283,
        "contract": "contracts/validators/p256/P256Validator.sol:P256Validator",
        "label": "pks",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      }
    }
  }
}