{
  "address": "0x387A688012Fc0ec588fdab471f8c000526b2F952",
  "abi": [
    {
      "inputs": [],
      "name": "nn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "validateSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4cfc1179cb96fc2b3869a39337b7f46eb06c031549e19090be1bdd529341c287",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x962F35D2249B069B38BbE169B2A449f823b8Bf79",
    "contractAddress": null,
    "transactionIndex": 82,
    "gasUsed": "650155",
    "logsBloom": "0x
    "blockHash": "0x0463a52c06fc64d33b38f62a9a08394a686f562b28bf6c67486ef546a50e96d2",
    "transactionHash": "0x4cfc1179cb96fc2b3869a39337b7f46eb06c031549e19090be1bdd529341c287",
    "logs": [],
    "blockNumber": 4479569,
    "cumulativeGasUsed": "26017177",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a4d8e342d6cde8f1a37a3581add4cdd2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"nn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"validateSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/validators/p256/Secp256r1.sol\":\"Secp256r1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/validators/p256/ISecp256r1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ISecp256r1 {\\n    function validateSignature(bytes32 message, bytes calldata signature, bytes calldata publicKey)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2c27d09b504eebfad02daf6a774b8df8bf29c51077f288bf6dd5464b4a18d177\",\"license\":\"MIT\"},\"contracts/validators/p256/Secp256r1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./ISecp256r1.sol\\\";\\n\\ncontract Secp256r1 is ISecp256r1 {\\n    struct JPoint {\\n        uint256 x;\\n        uint256 y;\\n        uint256 z;\\n    }\\n\\n    uint256 constant gx = 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint256 constant gy = 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    uint256 public constant pp = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 public constant nn = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\\n    uint256 constant a = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    uint256 constant b = 0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    uint256 constant MOST_SIGNIFICANT = 0xc000000000000000000000000000000000000000000000000000000000000000;\\n\\n    function verifyWithPrecompute(JPoint[16] memory points, uint256 r, uint256 s, uint256 e)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (r >= nn || s >= nn) {\\n            return false;\\n        }\\n\\n        uint256 w = _primemod(s, nn);\\n\\n        uint256 u1 = mulmod(e, w, nn);\\n        uint256 u2 = mulmod(r, w, nn);\\n\\n        uint256 x;\\n        uint256 y;\\n\\n        (x, y) = ShamirMultJacobian(points, u1, u2);\\n        return (x == r);\\n    }\\n\\n    /*\\n     * Strauss Shamir trick for EC multiplication\\n     * https://stackoverflow.com/questions/50993471/ec-scalar-multiplication-with-strauss-shamir-method\\n     * we optimise on this a bit to do with 2 bits at a time rather than a single bit\\n     * the individual points for a single pass are precomputed\\n     * overall this reduces the number of additions while keeping the same number of doublings\\n     */\\n    function ShamirMultJacobian(JPoint[16] memory points, uint256 u1, uint256 u2)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 x = 0;\\n        uint256 y = 0;\\n        uint256 z = 0;\\n        uint256 bits = 128;\\n        uint256 index = 0;\\n\\n        while (bits > 0) {\\n            if (z > 0) {\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n            }\\n            index = ((u1 & MOST_SIGNIFICANT) >> 252) | ((u2 & MOST_SIGNIFICANT) >> 254);\\n            if (index > 0) {\\n                (x, y, z) = _jAdd(x, y, z, points[index].x, points[index].y, points[index].z);\\n            }\\n            u1 <<= 2;\\n            u2 <<= 2;\\n            bits--;\\n        }\\n        (x, y) = _affineFromJacobian(x, y, z);\\n        return (x, y);\\n    }\\n\\n    function _preComputeJacobianPoints(uint256 x, uint256 y) internal pure returns (JPoint[16] memory points) {\\n        points[0] = JPoint(0, 0, 0);\\n        points[1] = JPoint(x, y, 1); // u2\\n        points[2] = _jPointDouble(points[1]);\\n        points[3] = _jPointAdd(points[1], points[2]);\\n\\n        points[4] = JPoint(gx, gy, 1); // u1Points[1]\\n        points[5] = _jPointAdd(points[4], points[1]);\\n        points[6] = _jPointAdd(points[4], points[2]);\\n        points[7] = _jPointAdd(points[4], points[3]);\\n\\n        points[8] = _jPointDouble(points[4]); // u1Points[2]\\n        points[9] = _jPointAdd(points[8], points[1]);\\n        points[10] = _jPointAdd(points[8], points[2]);\\n        points[11] = _jPointAdd(points[8], points[3]);\\n\\n        points[12] = _jPointAdd(points[4], points[8]); // u1Points[3]\\n        points[13] = _jPointAdd(points[12], points[1]);\\n        points[14] = _jPointAdd(points[12], points[2]);\\n        points[15] = _jPointAdd(points[12], points[3]);\\n    }\\n\\n    function _jPointAdd(JPoint memory p1, JPoint memory p2) internal pure returns (JPoint memory) {\\n        uint256 x;\\n        uint256 y;\\n        uint256 z;\\n        (x, y, z) = _jAdd(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    function _jPointDouble(JPoint memory p) internal pure returns (JPoint memory) {\\n        uint256 x;\\n        uint256 y;\\n        uint256 z;\\n        (x, y, z) = _modifiedJacobianDouble(p.x, p.y, p.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    /* _affineFromJacobian\\n     * @desription returns affine coordinates from a jacobian input follows\\n     * golang elliptic/crypto library\\n     */\\n    function _affineFromJacobian(uint256 x, uint256 y, uint256 z) internal view returns (uint256 ax, uint256 ay) {\\n        if (z == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint256 zinv = _primemod(z, pp);\\n        uint256 zinvsq = mulmod(zinv, zinv, pp);\\n\\n        ax = mulmod(x, zinvsq, pp);\\n        ay = mulmod(y, mulmod(zinvsq, zinv, pp), pp);\\n    }\\n\\n    /*\\n     * _jAdd\\n     * @description performs double Jacobian as defined below:\\n     * https://hyperelliptic.org/EFD/g1p/auto-code/shortw/jacobian-3/doubling/mdbl-2007-bl.op3\\n     */\\n    function _jAdd(uint256 p1, uint256 p2, uint256 p3, uint256 q1, uint256 q2, uint256 q3)\\n        internal\\n        pure\\n        returns (uint256 r1, uint256 r2, uint256 r3)\\n    {\\n        if (p3 == 0) {\\n            r1 = q1;\\n            r2 = q2;\\n            r3 = q3;\\n\\n            return (r1, r2, r3);\\n        } else if (q3 == 0) {\\n            r1 = p1;\\n            r2 = p2;\\n            r3 = p3;\\n\\n            return (r1, r2, r3);\\n        }\\n\\n        assembly {\\n            let pd := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z1z1 := mulmod(p3, p3, pd) // Z1Z1 = Z1^2\\n            let z2z2 := mulmod(q3, q3, pd) // Z2Z2 = Z2^2\\n\\n            let u1 := mulmod(p1, z2z2, pd) // U1 = X1*Z2Z2\\n            let u2 := mulmod(q1, z1z1, pd) // U2 = X2*Z1Z1\\n\\n            let s1 := mulmod(p2, mulmod(z2z2, q3, pd), pd) // S1 = Y1*Z2*Z2Z2\\n            let s2 := mulmod(q2, mulmod(z1z1, p3, pd), pd) // S2 = Y2*Z1*Z1Z1\\n\\n            let p3q3 := addmod(p3, q3, pd)\\n\\n            if lt(u2, u1) { u2 := add(pd, u2) } // u2 = u2+pd\\n\\n            let h := sub(u2, u1) // H = U2-U1\\n\\n            let i := mulmod(0x02, h, pd)\\n            i := mulmod(i, i, pd) // I = (2*H)^2\\n\\n            let j := mulmod(h, i, pd) // J = H*I\\n            if lt(s2, s1) { s2 := add(pd, s2) } // u2 = u2+pd\\n\\n            let rr := mulmod(0x02, sub(s2, s1), pd) // r = 2*(S2-S1)\\n            r1 := mulmod(rr, rr, pd) // X3 = R^2\\n\\n            let v := mulmod(u1, i, pd) // V = U1*I\\n            let j2v := addmod(j, mulmod(0x02, v, pd), pd)\\n            if lt(r1, j2v) { r1 := add(pd, r1) } // X3 = X3+pd\\n\\n            r1 := sub(r1, j2v)\\n\\n            // Y3 = r*(V-X3)-2*S1*J\\n            let s12j := mulmod(mulmod(0x02, s1, pd), j, pd)\\n\\n            if lt(v, r1) { v := add(pd, v) }\\n            r2 := mulmod(rr, sub(v, r1), pd)\\n\\n            if lt(r2, s12j) { r2 := add(pd, r2) }\\n            r2 := sub(r2, s12j)\\n\\n            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2)*H\\n            z1z1 := addmod(z1z1, z2z2, pd)\\n            j2v := mulmod(p3q3, p3q3, pd)\\n            if lt(j2v, z1z1) { j2v := add(pd, j2v) }\\n            r3 := mulmod(sub(j2v, z1z1), h, pd)\\n        }\\n        return (r1, r2, r3);\\n    }\\n\\n    // Point doubling on the modified jacobian coordinates\\n    // http://point-at-infinity.org/ecc/Prime_Curve_Modified_Jacobian_Coordinates.html\\n    function _modifiedJacobianDouble(uint256 x, uint256 y, uint256 z)\\n        internal\\n        pure\\n        returns (uint256 x3, uint256 y3, uint256 z3)\\n    {\\n        assembly {\\n            let pd := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z2 := mulmod(z, z, pd)\\n            let az4 :=\\n                mulmod(0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC, mulmod(z2, z2, pd), pd)\\n            let y2 := mulmod(y, y, pd)\\n            let s := mulmod(0x04, mulmod(x, y2, pd), pd)\\n            let u := mulmod(0x08, mulmod(y2, y2, pd), pd)\\n            let m := addmod(mulmod(0x03, mulmod(x, x, pd), pd), az4, pd)\\n            let twos := mulmod(0x02, s, pd)\\n            let m2 := mulmod(m, m, pd)\\n            if lt(m2, twos) { m2 := add(pd, m2) }\\n            x3 := sub(m2, twos)\\n            if lt(s, x3) { s := add(pd, s) }\\n            y3 := mulmod(m, sub(s, x3), pd)\\n            if lt(y3, u) { y3 := add(pd, y3) }\\n            y3 := sub(y3, u)\\n            z3 := mulmod(0x02, mulmod(y, z, pd), pd)\\n        }\\n    }\\n\\n    // Fermats little theorem https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\\n    // a^(p-1) = 1 mod p\\n    // a^(-1) \\u2245 a^(p-2) (mod p)\\n    // we then use the precompile bigModExp to compute a^(-1)\\n    function _primemod(uint256 value, uint256 p) internal view returns (uint256 ret) {\\n        ret = modexp(value, p - 2, p);\\n        return ret;\\n    }\\n\\n    // Wrapper for built-in BigNumber_modexp (contract 0x5) as described here. https://github.com/ethereum/EIPs/pull/198\\n    function modexp(uint256 _base, uint256 _exp, uint256 _mod) internal view returns (uint256 ret) {\\n        // bigModExp(_base, _exp, _mod);\\n        assembly {\\n            if gt(_base, _mod) { _base := mod(_base, _mod) }\\n            // Free memory pointer is always stored at 0x40\\n            let freemem := mload(0x40)\\n\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n\\n            mstore(add(freemem, 0x60), _base)\\n            mstore(add(freemem, 0x80), _exp)\\n            mstore(add(freemem, 0xa0), _mod)\\n\\n            let success := staticcall(1500, 0x5, freemem, 0xc0, freemem, 0x20)\\n            switch success\\n            case 0 { revert(0x0, 0x0) }\\n            default { ret := mload(freemem) }\\n        }\\n    }\\n\\n    function validateSignature(bytes32 message, bytes calldata signature, bytes calldata publicKey)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        uint256[2] memory rs;\\n        (rs[0], rs[1]) = abi.decode(signature, (uint256, uint256));\\n        if (rs[0] >= nn || rs[1] >= nn || rs[0] == 0 || rs[1] == 0) {\\n            //check <n and that sig is not null, otherwise (0,0) is accepted for any publickey and message\\n            return false;\\n        }\\n\\n        uint256[2] memory Q;\\n        (Q[0], Q[1]) = abi.decode(publicKey, (uint256, uint256));\\n\\n        JPoint[16] memory points = _preComputeJacobianPoints(Q[0], Q[1]);\\n        return verifyWithPrecompute(points, rs[0], rs[1], uint256(message));\\n    }\\n}\\n\",\"keccak256\":\"0x6baee76789cd2ab7fda8dd831e053541ef988ea77a8eb474d1f42a0fa078f413\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610aca806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806372a4c30f1461004657806391327ec61461007d578063ae7e17f014610098575b600080fd5b61006a7bffffffff00000000000000004319055258e8617b0c46353d039cdaae1981565b6040519081526020015b60405180910390f35b61006a6ffffffffeffffffffffffffffffffffff60601b1981565b6100ab6100a63660046109cb565b6100bb565b6040519015158152602001610074565b60006100c561091a565b6100d185870187610a45565b60208301528082527bffffffff00000000000000004319055258e8617b0c46353d039cdaae19111580610125575060208101517bffffffff00000000000000004319055258e8617b0c46353d039cdaae1911155b8061012f57508051155b8061013c57506020810151155b1561014b576000915050610192565b61015361091a565b61015f84860186610a45565b602083018190528183526000916101759161019b565b8351602085015191925061018c918391908c61037c565b93505050505b95945050505050565b6101a3610938565b604051806060016040528060008152602001600081526020016000815250816000601081106101d4576101d4610a67565b6020020181905250604051806060016040528084815260200183815260200160018152508160016010811061020b5761020b610a67565b60200201526102218160015b602002015161046a565b60408201526102408160015b60200201518260025b60200201516104cc565b6060828101919091526040805191820181527f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29682527f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5602083015260019082015260808201526102ba8160045b6020020151826001610236565b60a08201526102ca81600461022d565b60c08201526102e38160045b6020020151826003610236565b60e08201526102f3816004610217565b6101008201526103048160086102ad565b61012082015261031581600861022d565b6101408201526103268160086102d6565b610160820152608081015161033d90826008610236565b61018082015261034e81600c6102ad565b6101a082015261035f81600c61022d565b6101c082015261037081600c6102d6565b6101e082015292915050565b60007bffffffff00000000000000004319055258e8617b0c46353d039cdaae19841015806103c757507bffffffff00000000000000004319055258e8617b0c46353d039cdaae198310155b156103d457506000610462565b60006103fd847bffffffff00000000000000004319055258e8617b0c46353d039cdaae19610540565b905060007bffffffff00000000000000004319055258e8617b0c46353d039cdaae19828509905060007bffffffff00000000000000004319055258e8617b0c46353d039cdaae1983880990506000806104578a858561055e565b508914955050505050505b949350505050565b61048e60405180606001604052806000815260200160008152602001600081525090565b60008060006104aa85600001518660200151876040015161064a565b6040805160608101825293845260208401929092529082015295945050505050565b6104f060405180606001604052806000815260200160008152602001600081525090565b600080600061051b866000015187602001518860400151886000015189602001518a60400151610705565b6040805160608101825293845260208401929092529082015293505050505b92915050565b600061055783610551600285610a93565b84610831565b9392505050565b6000808080806080815b811561062c5782156105995761057f85858561064a565b9196509450925061059185858561064a565b919650945092505b50600c60fc89901c1660fe88901c17801561060f576106078585858d85601081106105c6576105c6610a67565b6020020151518e86601081106105de576105de610a67565b6020020151602001518f87601081106105f9576105f9610a67565b602002015160400151610705565b919650945092505b600298891b989790971b968161062481610aa6565b925050610568565b610637858585610885565b909750955050505050505b935093915050565b60008060006ffffffffeffffffffffffffffffffffff60601b198085860981828283097fffffffff00000001000000000000000000000000fffffffffffffffffffffffc099050818788098283828b0960040983848384096008099150838385868d8e09600309089250838160020984848509818110156106c85785015b039650868110156106d65783015b838782038409955050808510156106ec57938201935b9093039250808086880960020991505093509350939050565b60008060008660000361071f575084915083905082610825565b83600003610734575087915086905085610825565b6ffffffffeffffffffffffffffffffffff60601b19808889098186870982818d0983838b0984858a85098e0985868e87098c09868b8f088484101561077857928701925b84840393508784600209888182099050888186098484101561079957928901925b898585036002099350898485099c50898288099650898a8860020982089150818d10156107c5579b89019b5b818d039c5089818b87600209099450508b8610156107e257948801945b888c870384099a50838b10156107f757998801995b838b039a50888789089750888283099050878110156108135788015b88858983030999505050505050505050505b96509650969350505050565b6000818411156108415781840693505b60405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360056105dcfa80801561004157505051949350505050565b6000808260000361089b57506000905080610642565b60006108bb846ffffffffeffffffffffffffffffffffff60601b19610540565b905060006ffffffffeffffffffffffffffffffffff60601b1982830990506ffffffffeffffffffffffffffffffffff60601b1981880993506ffffffffeffffffffffffffffffffffff60601b1980838309870992505050935093915050565b60405180604001604052806002906020820280368337509192915050565b6040518061020001604052806010905b61096c60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816109485790505090565b60008083601f84011261099457600080fd5b50813567ffffffffffffffff8111156109ac57600080fd5b6020830191508360208285010111156109c457600080fd5b9250929050565b6000806000806000606086880312156109e357600080fd5b85359450602086013567ffffffffffffffff80821115610a0257600080fd5b610a0e89838a01610982565b90965094506040880135915080821115610a2757600080fd5b50610a3488828901610982565b969995985093965092949392505050565b60008060408385031215610a5857600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561053a5761053a610a7d565b600081610ab557610ab5610a7d565b50600019019056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806372a4c30f1461004657806391327ec61461007d578063ae7e17f014610098575b600080fd5b61006a7bffffffff00000000000000004319055258e8617b0c46353d039cdaae1981565b6040519081526020015b60405180910390f35b61006a6ffffffffeffffffffffffffffffffffff60601b1981565b6100ab6100a63660046109cb565b6100bb565b6040519015158152602001610074565b60006100c561091a565b6100d185870187610a45565b60208301528082527bffffffff00000000000000004319055258e8617b0c46353d039cdaae19111580610125575060208101517bffffffff00000000000000004319055258e8617b0c46353d039cdaae1911155b8061012f57508051155b8061013c57506020810151155b1561014b576000915050610192565b61015361091a565b61015f84860186610a45565b602083018190528183526000916101759161019b565b8351602085015191925061018c918391908c61037c565b93505050505b95945050505050565b6101a3610938565b604051806060016040528060008152602001600081526020016000815250816000601081106101d4576101d4610a67565b6020020181905250604051806060016040528084815260200183815260200160018152508160016010811061020b5761020b610a67565b60200201526102218160015b602002015161046a565b60408201526102408160015b60200201518260025b60200201516104cc565b6060828101919091526040805191820181527f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29682527f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5602083015260019082015260808201526102ba8160045b6020020151826001610236565b60a08201526102ca81600461022d565b60c08201526102e38160045b6020020151826003610236565b60e08201526102f3816004610217565b6101008201526103048160086102ad565b61012082015261031581600861022d565b6101408201526103268160086102d6565b610160820152608081015161033d90826008610236565b61018082015261034e81600c6102ad565b6101a082015261035f81600c61022d565b6101c082015261037081600c6102d6565b6101e082015292915050565b60007bffffffff00000000000000004319055258e8617b0c46353d039cdaae19841015806103c757507bffffffff00000000000000004319055258e8617b0c46353d039cdaae198310155b156103d457506000610462565b60006103fd847bffffffff00000000000000004319055258e8617b0c46353d039cdaae19610540565b905060007bffffffff00000000000000004319055258e8617b0c46353d039cdaae19828509905060007bffffffff00000000000000004319055258e8617b0c46353d039cdaae1983880990506000806104578a858561055e565b508914955050505050505b949350505050565b61048e60405180606001604052806000815260200160008152602001600081525090565b60008060006104aa85600001518660200151876040015161064a565b6040805160608101825293845260208401929092529082015295945050505050565b6104f060405180606001604052806000815260200160008152602001600081525090565b600080600061051b866000015187602001518860400151886000015189602001518a60400151610705565b6040805160608101825293845260208401929092529082015293505050505b92915050565b600061055783610551600285610a93565b84610831565b9392505050565b6000808080806080815b811561062c5782156105995761057f85858561064a565b9196509450925061059185858561064a565b919650945092505b50600c60fc89901c1660fe88901c17801561060f576106078585858d85601081106105c6576105c6610a67565b6020020151518e86601081106105de576105de610a67565b6020020151602001518f87601081106105f9576105f9610a67565b602002015160400151610705565b919650945092505b600298891b989790971b968161062481610aa6565b925050610568565b610637858585610885565b909750955050505050505b935093915050565b60008060006ffffffffeffffffffffffffffffffffff60601b198085860981828283097fffffffff00000001000000000000000000000000fffffffffffffffffffffffc099050818788098283828b0960040983848384096008099150838385868d8e09600309089250838160020984848509818110156106c85785015b039650868110156106d65783015b838782038409955050808510156106ec57938201935b9093039250808086880960020991505093509350939050565b60008060008660000361071f575084915083905082610825565b83600003610734575087915086905085610825565b6ffffffffeffffffffffffffffffffffff60601b19808889098186870982818d0983838b0984858a85098e0985868e87098c09868b8f088484101561077857928701925b84840393508784600209888182099050888186098484101561079957928901925b898585036002099350898485099c50898288099650898a8860020982089150818d10156107c5579b89019b5b818d039c5089818b87600209099450508b8610156107e257948801945b888c870384099a50838b10156107f757998801995b838b039a50888789089750888283099050878110156108135788015b88858983030999505050505050505050505b96509650969350505050565b6000818411156108415781840693505b60405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360056105dcfa80801561004157505051949350505050565b6000808260000361089b57506000905080610642565b60006108bb846ffffffffeffffffffffffffffffffffff60601b19610540565b905060006ffffffffeffffffffffffffffffffffff60601b1982830990506ffffffffeffffffffffffffffffffffff60601b1981880993506ffffffffeffffffffffffffffffffffff60601b1980838309870992505050935093915050565b60405180604001604052806002906020820280368337509192915050565b6040518061020001604052806010905b61096c60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816109485790505090565b60008083601f84011261099457600080fd5b50813567ffffffffffffffff8111156109ac57600080fd5b6020830191508360208285010111156109c457600080fd5b9250929050565b6000806000806000606086880312156109e357600080fd5b85359450602086013567ffffffffffffffff80821115610a0257600080fd5b610a0e89838a01610982565b90965094506040880135915080821115610a2757600080fd5b50610a3488828901610982565b969995985093965092949392505050565b60008060408385031215610a5857600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561053a5761053a610a7d565b600081610ab557610ab5610a7d565b50600019019056fea164736f6c6343000813000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}