/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EntryPointInterface extends ethers.utils.Interface {
  functions: {
    "SIG_VALIDATION_FAILED()": FunctionFragment;
    "_validateSenderAndPaymaster(bytes,address,bytes)": FunctionFragment;
    "addStake(uint32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "depositTo(address)": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "getDepositInfo(address)": FunctionFragment;
    "getNonce(address,uint192)": FunctionFragment;
    "getSenderAddress(bytes)": FunctionFragment;
    "getUserOpHash(tuple)": FunctionFragment;
    "handleAggregatedOps(tuple[],address)": FunctionFragment;
    "handleOps(tuple[],address)": FunctionFragment;
    "incrementNonce(uint192)": FunctionFragment;
    "innerHandleOp(bytes,tuple,bytes)": FunctionFragment;
    "nonceSequenceNumber(address,uint192)": FunctionFragment;
    "simulateHandleOp(tuple,address,bytes)": FunctionFragment;
    "simulateValidation(tuple)": FunctionFragment;
    "unlockStake()": FunctionFragment;
    "withdrawStake(address)": FunctionFragment;
    "withdrawTo(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SIG_VALIDATION_FAILED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_validateSenderAndPaymaster",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "depositTo", values: [string]): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDepositInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOpHash",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleAggregatedOps",
    values: [
      {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOps",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "innerHandleOp",
    values: [
      BytesLike,
      {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceSequenceNumber",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateHandleOp",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateValidation",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SIG_VALIDATION_FAILED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_validateSenderAndPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOpHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleAggregatedOps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleOps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "innerHandleOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonceSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateHandleOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "AccountDeployed(bytes32,address,address,address)": EventFragment;
    "BeforeExecution()": EventFragment;
    "Deposited(address,uint256)": EventFragment;
    "SignatureAggregatorChanged(address)": EventFragment;
    "StakeLocked(address,uint256,uint256)": EventFragment;
    "StakeUnlocked(address,uint256)": EventFragment;
    "StakeWithdrawn(address,address,uint256)": EventFragment;
    "UserOperationEvent(bytes32,address,address,uint256,bool,uint256,uint256)": EventFragment;
    "UserOperationRevertReason(bytes32,address,uint256,bytes)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeforeExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignatureAggregatorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserOperationEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserOperationRevertReason"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class EntryPoint extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EntryPointInterface;

  functions: {
    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SIG_VALIDATION_FAILED()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _validateSenderAndPaymaster(
      initCode: BytesLike,
      sender: string,
      paymasterAndData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "_validateSenderAndPaymaster(bytes,address,bytes)"(
      initCode: BytesLike,
      sender: string,
      paymasterAndData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    addStake(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addStake(uint32)"(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    depositTo(
      account: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositTo(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: number;
      0: BigNumber;
      1: boolean;
      2: BigNumber;
      3: number;
      4: number;
    }>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: number;
      0: BigNumber;
      1: boolean;
      2: BigNumber;
      3: number;
      4: number;
    }>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      info: {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: number;
        0: BigNumber;
        1: boolean;
        2: BigNumber;
        3: number;
        4: number;
      };
      0: {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: number;
        0: BigNumber;
        1: boolean;
        2: BigNumber;
        3: number;
        4: number;
      };
    }>;

    "getDepositInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      info: {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: number;
        0: BigNumber;
        1: boolean;
        2: BigNumber;
        3: number;
        4: number;
      };
      0: {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: number;
        0: BigNumber;
        1: boolean;
        2: BigNumber;
        3: number;
        4: number;
      };
    }>;

    getNonce(
      sender: string,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      0: BigNumber;
    }>;

    "getNonce(address,uint192)"(
      sender: string,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      0: BigNumber;
    }>;

    getSenderAddress(
      initCode: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getSenderAddress(bytes)"(
      initCode: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserOpHash(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getUserOpHash(tuple)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    handleAggregatedOps(
      opsPerAggregator: {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "handleAggregatedOps(tuple[],address)"(
      opsPerAggregator: {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    handleOps(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "handleOps(tuple[],address)"(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    incrementNonce(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementNonce(uint192)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    innerHandleOp(
      callData: BytesLike,
      opInfo: {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "innerHandleOp(bytes,tuple,bytes)"(
      callData: BytesLike,
      opInfo: {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nonceSequenceNumber(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonceSequenceNumber(address,uint192)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    simulateHandleOp(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      target: string,
      targetCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "simulateHandleOp(tuple,address,bytes)"(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      target: string,
      targetCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    simulateValidation(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "simulateValidation(tuple)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockStake(overrides?: Overrides): Promise<ContractTransaction>;

    "unlockStake()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawStake(address)"(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTo(address,uint256)"(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

  "SIG_VALIDATION_FAILED()"(overrides?: CallOverrides): Promise<BigNumber>;

  _validateSenderAndPaymaster(
    initCode: BytesLike,
    sender: string,
    paymasterAndData: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "_validateSenderAndPaymaster(bytes,address,bytes)"(
    initCode: BytesLike,
    sender: string,
    paymasterAndData: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  addStake(
    unstakeDelaySec: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addStake(uint32)"(
    unstakeDelaySec: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositTo(
    account: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositTo(address)"(
    account: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  deposits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    deposit: BigNumber;
    staked: boolean;
    stake: BigNumber;
    unstakeDelaySec: number;
    withdrawTime: number;
    0: BigNumber;
    1: boolean;
    2: BigNumber;
    3: number;
    4: number;
  }>;

  "deposits(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    deposit: BigNumber;
    staked: boolean;
    stake: BigNumber;
    unstakeDelaySec: number;
    withdrawTime: number;
    0: BigNumber;
    1: boolean;
    2: BigNumber;
    3: number;
    4: number;
  }>;

  getDepositInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    deposit: BigNumber;
    staked: boolean;
    stake: BigNumber;
    unstakeDelaySec: number;
    withdrawTime: number;
    0: BigNumber;
    1: boolean;
    2: BigNumber;
    3: number;
    4: number;
  }>;

  "getDepositInfo(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    deposit: BigNumber;
    staked: boolean;
    stake: BigNumber;
    unstakeDelaySec: number;
    withdrawTime: number;
    0: BigNumber;
    1: boolean;
    2: BigNumber;
    3: number;
    4: number;
  }>;

  getNonce(
    sender: string,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNonce(address,uint192)"(
    sender: string,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSenderAddress(
    initCode: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getSenderAddress(bytes)"(
    initCode: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserOpHash(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "getUserOpHash(tuple)"(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  handleAggregatedOps(
    opsPerAggregator: {
      userOps: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[];
      aggregator: string;
      signature: BytesLike;
    }[],
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "handleAggregatedOps(tuple[],address)"(
    opsPerAggregator: {
      userOps: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[];
      aggregator: string;
      signature: BytesLike;
    }[],
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  handleOps(
    ops: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    }[],
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "handleOps(tuple[],address)"(
    ops: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    }[],
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  incrementNonce(
    key: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementNonce(uint192)"(
    key: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  innerHandleOp(
    callData: BytesLike,
    opInfo: {
      mUserOp: {
        sender: string;
        nonce: BigNumberish;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        paymaster: string;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
      };
      userOpHash: BytesLike;
      prefund: BigNumberish;
      contextOffset: BigNumberish;
      preOpGas: BigNumberish;
    },
    context: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "innerHandleOp(bytes,tuple,bytes)"(
    callData: BytesLike,
    opInfo: {
      mUserOp: {
        sender: string;
        nonce: BigNumberish;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        paymaster: string;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
      };
      userOpHash: BytesLike;
      prefund: BigNumberish;
      contextOffset: BigNumberish;
      preOpGas: BigNumberish;
    },
    context: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nonceSequenceNumber(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonceSequenceNumber(address,uint192)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  simulateHandleOp(
    op: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    target: string,
    targetCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "simulateHandleOp(tuple,address,bytes)"(
    op: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    target: string,
    targetCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  simulateValidation(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "simulateValidation(tuple)"(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockStake(overrides?: Overrides): Promise<ContractTransaction>;

  "unlockStake()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawStake(
    withdrawAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawStake(address)"(
    withdrawAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawTo(
    withdrawAddress: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTo(address,uint256)"(
    withdrawAddress: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

    "SIG_VALIDATION_FAILED()"(overrides?: CallOverrides): Promise<BigNumber>;

    _validateSenderAndPaymaster(
      initCode: BytesLike,
      sender: string,
      paymasterAndData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "_validateSenderAndPaymaster(bytes,address,bytes)"(
      initCode: BytesLike,
      sender: string,
      paymasterAndData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addStake(
      unstakeDelaySec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStake(uint32)"(
      unstakeDelaySec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTo(account: string, overrides?: CallOverrides): Promise<void>;

    "depositTo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: number;
      0: BigNumber;
      1: boolean;
      2: BigNumber;
      3: number;
      4: number;
    }>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: number;
      0: BigNumber;
      1: boolean;
      2: BigNumber;
      3: number;
      4: number;
    }>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: number;
      0: BigNumber;
      1: boolean;
      2: BigNumber;
      3: number;
      4: number;
    }>;

    "getDepositInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: number;
      0: BigNumber;
      1: boolean;
      2: BigNumber;
      3: number;
      4: number;
    }>;

    getNonce(
      sender: string,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(address,uint192)"(
      sender: string,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSenderAddress(
      initCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "getSenderAddress(bytes)"(
      initCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserOpHash(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "getUserOpHash(tuple)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    handleAggregatedOps(
      opsPerAggregator: {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "handleAggregatedOps(tuple[],address)"(
      opsPerAggregator: {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    handleOps(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "handleOps(tuple[],address)"(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    incrementNonce(key: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "incrementNonce(uint192)"(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    innerHandleOp(
      callData: BytesLike,
      opInfo: {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "innerHandleOp(bytes,tuple,bytes)"(
      callData: BytesLike,
      opInfo: {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceSequenceNumber(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonceSequenceNumber(address,uint192)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulateHandleOp(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      target: string,
      targetCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "simulateHandleOp(tuple,address,bytes)"(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      target: string,
      targetCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateValidation(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "simulateValidation(tuple)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    unlockStake(overrides?: CallOverrides): Promise<void>;

    "unlockStake()"(overrides?: CallOverrides): Promise<void>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawStake(address)"(
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTo(address,uint256)"(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccountDeployed(
      userOpHash: BytesLike | null,
      sender: string | null,
      factory: null,
      paymaster: null
    ): EventFilter;

    BeforeExecution(): EventFilter;

    Deposited(account: string | null, totalDeposit: null): EventFilter;

    SignatureAggregatorChanged(aggregator: string | null): EventFilter;

    StakeLocked(
      account: string | null,
      totalStaked: null,
      unstakeDelaySec: null
    ): EventFilter;

    StakeUnlocked(account: string | null, withdrawTime: null): EventFilter;

    StakeWithdrawn(
      account: string | null,
      withdrawAddress: null,
      amount: null
    ): EventFilter;

    UserOperationEvent(
      userOpHash: BytesLike | null,
      sender: string | null,
      paymaster: string | null,
      nonce: null,
      success: null,
      actualGasCost: null,
      actualGasUsed: null
    ): EventFilter;

    UserOperationRevertReason(
      userOpHash: BytesLike | null,
      sender: string | null,
      nonce: null,
      revertReason: null
    ): EventFilter;

    Withdrawn(
      account: string | null,
      withdrawAddress: null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

    "SIG_VALIDATION_FAILED()"(overrides?: CallOverrides): Promise<BigNumber>;

    _validateSenderAndPaymaster(
      initCode: BytesLike,
      sender: string,
      paymasterAndData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_validateSenderAndPaymaster(bytes,address,bytes)"(
      initCode: BytesLike,
      sender: string,
      paymasterAndData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStake(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addStake(uint32)"(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTo(
      account: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositTo(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDepositInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      sender: string,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(address,uint192)"(
      sender: string,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSenderAddress(
      initCode: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getSenderAddress(bytes)"(
      initCode: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserOpHash(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserOpHash(tuple)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleAggregatedOps(
      opsPerAggregator: {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "handleAggregatedOps(tuple[],address)"(
      opsPerAggregator: {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    handleOps(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "handleOps(tuple[],address)"(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    incrementNonce(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementNonce(uint192)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    innerHandleOp(
      callData: BytesLike,
      opInfo: {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "innerHandleOp(bytes,tuple,bytes)"(
      callData: BytesLike,
      opInfo: {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nonceSequenceNumber(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonceSequenceNumber(address,uint192)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulateHandleOp(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      target: string,
      targetCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "simulateHandleOp(tuple,address,bytes)"(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      target: string,
      targetCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    simulateValidation(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "simulateValidation(tuple)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockStake(overrides?: Overrides): Promise<BigNumber>;

    "unlockStake()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawStake(address)"(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTo(address,uint256)"(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SIG_VALIDATION_FAILED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIG_VALIDATION_FAILED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _validateSenderAndPaymaster(
      initCode: BytesLike,
      sender: string,
      paymasterAndData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_validateSenderAndPaymaster(bytes,address,bytes)"(
      initCode: BytesLike,
      sender: string,
      paymasterAndData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStake(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addStake(uint32)"(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositTo(
      account: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositTo(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDepositInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      sender: string,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address,uint192)"(
      sender: string,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSenderAddress(
      initCode: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getSenderAddress(bytes)"(
      initCode: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserOpHash(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserOpHash(tuple)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleAggregatedOps(
      opsPerAggregator: {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "handleAggregatedOps(tuple[],address)"(
      opsPerAggregator: {
        userOps: {
          sender: string;
          nonce: BigNumberish;
          initCode: BytesLike;
          callData: BytesLike;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
          paymasterAndData: BytesLike;
          signature: BytesLike;
        }[];
        aggregator: string;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    handleOps(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "handleOps(tuple[],address)"(
      ops: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      }[],
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    incrementNonce(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementNonce(uint192)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    innerHandleOp(
      callData: BytesLike,
      opInfo: {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "innerHandleOp(bytes,tuple,bytes)"(
      callData: BytesLike,
      opInfo: {
        mUserOp: {
          sender: string;
          nonce: BigNumberish;
          callGasLimit: BigNumberish;
          verificationGasLimit: BigNumberish;
          preVerificationGas: BigNumberish;
          paymaster: string;
          maxFeePerGas: BigNumberish;
          maxPriorityFeePerGas: BigNumberish;
        };
        userOpHash: BytesLike;
        prefund: BigNumberish;
        contextOffset: BigNumberish;
        preOpGas: BigNumberish;
      },
      context: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nonceSequenceNumber(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonceSequenceNumber(address,uint192)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    simulateHandleOp(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      target: string,
      targetCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "simulateHandleOp(tuple,address,bytes)"(
      op: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      target: string,
      targetCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    simulateValidation(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "simulateValidation(tuple)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockStake(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unlockStake()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawStake(address)"(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTo(address,uint256)"(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
