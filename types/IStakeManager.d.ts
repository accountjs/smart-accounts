/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IStakeManagerInterface extends ethers.utils.Interface {
  functions: {
    "addStake(uint32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "depositTo(address)": FunctionFragment;
    "getDepositInfo(address)": FunctionFragment;
    "unlockStake()": FunctionFragment;
    "withdrawStake(address)": FunctionFragment;
    "withdrawTo(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "depositTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDepositInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "Deposited(address,uint256)": EventFragment;
    "StakeLocked(address,uint256,uint256)": EventFragment;
    "StakeUnlocked(address,uint256)": EventFragment;
    "StakeWithdrawn(address,address,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class IStakeManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStakeManagerInterface;

  functions: {
    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addStake(uint32)"(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    depositTo(
      account: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositTo(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      info: {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: number;
        0: BigNumber;
        1: boolean;
        2: BigNumber;
        3: number;
        4: number;
      };
      0: {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: number;
        0: BigNumber;
        1: boolean;
        2: BigNumber;
        3: number;
        4: number;
      };
    }>;

    "getDepositInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      info: {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: number;
        0: BigNumber;
        1: boolean;
        2: BigNumber;
        3: number;
        4: number;
      };
      0: {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: number;
        0: BigNumber;
        1: boolean;
        2: BigNumber;
        3: number;
        4: number;
      };
    }>;

    unlockStake(overrides?: Overrides): Promise<ContractTransaction>;

    "unlockStake()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawStake(address)"(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTo(address,uint256)"(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addStake(
    _unstakeDelaySec: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addStake(uint32)"(
    _unstakeDelaySec: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositTo(
    account: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositTo(address)"(
    account: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getDepositInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    deposit: BigNumber;
    staked: boolean;
    stake: BigNumber;
    unstakeDelaySec: number;
    withdrawTime: number;
    0: BigNumber;
    1: boolean;
    2: BigNumber;
    3: number;
    4: number;
  }>;

  "getDepositInfo(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    deposit: BigNumber;
    staked: boolean;
    stake: BigNumber;
    unstakeDelaySec: number;
    withdrawTime: number;
    0: BigNumber;
    1: boolean;
    2: BigNumber;
    3: number;
    4: number;
  }>;

  unlockStake(overrides?: Overrides): Promise<ContractTransaction>;

  "unlockStake()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawStake(
    withdrawAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawStake(address)"(
    withdrawAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawTo(
    withdrawAddress: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTo(address,uint256)"(
    withdrawAddress: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStake(uint32)"(
      _unstakeDelaySec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTo(account: string, overrides?: CallOverrides): Promise<void>;

    "depositTo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: number;
      0: BigNumber;
      1: boolean;
      2: BigNumber;
      3: number;
      4: number;
    }>;

    "getDepositInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: number;
      0: BigNumber;
      1: boolean;
      2: BigNumber;
      3: number;
      4: number;
    }>;

    unlockStake(overrides?: CallOverrides): Promise<void>;

    "unlockStake()"(overrides?: CallOverrides): Promise<void>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawStake(address)"(
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTo(address,uint256)"(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposited(account: string | null, totalDeposit: null): EventFilter;

    StakeLocked(
      account: string | null,
      totalStaked: null,
      unstakeDelaySec: null
    ): EventFilter;

    StakeUnlocked(account: string | null, withdrawTime: null): EventFilter;

    StakeWithdrawn(
      account: string | null,
      withdrawAddress: null,
      amount: null
    ): EventFilter;

    Withdrawn(
      account: string | null,
      withdrawAddress: null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addStake(uint32)"(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTo(
      account: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositTo(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDepositInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockStake(overrides?: Overrides): Promise<BigNumber>;

    "unlockStake()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawStake(address)"(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTo(address,uint256)"(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addStake(uint32)"(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositTo(
      account: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositTo(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDepositInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockStake(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unlockStake()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawStake(address)"(
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTo(address,uint256)"(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
