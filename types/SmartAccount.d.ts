/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SmartAccountInterface extends ethers.utils.Interface {
  functions: {
    "disableModule(address,address)": FunctionFragment;
    "enableValidator(address,bytes)": FunctionFragment;
    "entryPoint()": FunctionFragment;
    "execute(address,uint256,bytes)": FunctionFragment;
    "executeBatch(address[],uint256[],bytes[])": FunctionFragment;
    "getFallbackHandler()": FunctionFragment;
    "getNonce()": FunctionFragment;
    "getValidatorsPaginated(address,uint256)": FunctionFragment;
    "initialize(address,address[],bytes[])": FunctionFragment;
    "isValidatorEnabled(address)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "setFallbackHandler(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validateUserOp(tuple,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableValidator",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getValidatorsPaginated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackHandler",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      BytesLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ChangedFallbackHandler(address,address)": EventFragment;
    "DisabledValidator(address)": EventFragment;
    "EnabledValidator(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedFallbackHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class SmartAccount extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SmartAccountInterface;

  functions: {
    disableModule(
      prevValidator: string,
      validator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disableModule(address,address)"(
      prevValidator: string,
      validator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enableValidator(
      validator: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableValidator(address,bytes)"(
      validator: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "entryPoint()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    execute(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(address,uint256,bytes)"(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeBatch(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeBatch(address[],uint256[],bytes[])"(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getFallbackHandler(overrides?: CallOverrides): Promise<{
      _handler: string;
      0: string;
    }>;

    "getFallbackHandler()"(overrides?: CallOverrides): Promise<{
      _handler: string;
      0: string;
    }>;

    getNonce(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getNonce()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getValidatorsPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    "getValidatorsPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    initialize(
      defalutCallbackHandler: string,
      validators: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address[],bytes[])"(
      defalutCallbackHandler: string,
      validators: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isValidatorEnabled(
      validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isValidatorEnabled(address)"(
      validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proxiableUUID(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "validateUserOp(tuple,bytes32,uint256)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  disableModule(
    prevValidator: string,
    validator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disableModule(address,address)"(
    prevValidator: string,
    validator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enableValidator(
    validator: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableValidator(address,bytes)"(
    validator: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  entryPoint(overrides?: CallOverrides): Promise<string>;

  "entryPoint()"(overrides?: CallOverrides): Promise<string>;

  execute(
    dest: string,
    value: BigNumberish,
    func: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(address,uint256,bytes)"(
    dest: string,
    value: BigNumberish,
    func: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeBatch(
    dest: string[],
    value: BigNumberish[],
    func: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeBatch(address[],uint256[],bytes[])"(
    dest: string[],
    value: BigNumberish[],
    func: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getFallbackHandler(overrides?: CallOverrides): Promise<string>;

  "getFallbackHandler()"(overrides?: CallOverrides): Promise<string>;

  getNonce(overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorsPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    array: string[];
    next: string;
    0: string[];
    1: string;
  }>;

  "getValidatorsPaginated(address,uint256)"(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    array: string[];
    next: string;
    0: string[];
    1: string;
  }>;

  initialize(
    defalutCallbackHandler: string,
    validators: string[],
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address[],bytes[])"(
    defalutCallbackHandler: string,
    validators: string[],
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isValidatorEnabled(
    validator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidatorEnabled(address)"(
    validator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  setFallbackHandler(
    handler: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFallbackHandler(address)"(
    handler: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  validateUserOp(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    userOpHash: BytesLike,
    missingAccountFunds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "validateUserOp(tuple,bytes32,uint256)"(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    userOpHash: BytesLike,
    missingAccountFunds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    disableModule(
      prevValidator: string,
      validator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "disableModule(address,address)"(
      prevValidator: string,
      validator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableValidator(
      validator: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "enableValidator(address,bytes)"(
      validator: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    entryPoint(overrides?: CallOverrides): Promise<string>;

    "entryPoint()"(overrides?: CallOverrides): Promise<string>;

    execute(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "execute(address,uint256,bytes)"(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeBatch(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "executeBatch(address[],uint256[],bytes[])"(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getFallbackHandler(overrides?: CallOverrides): Promise<string>;

    "getFallbackHandler()"(overrides?: CallOverrides): Promise<string>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorsPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    "getValidatorsPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    initialize(
      defalutCallbackHandler: string,
      validators: string[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address[],bytes[])"(
      defalutCallbackHandler: string,
      validators: string[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    isValidatorEnabled(
      validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidatorEnabled(address)"(
      validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    setFallbackHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFallbackHandler(address)"(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateUserOp(tuple,bytes32,uint256)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    BeaconUpgraded(beacon: string | null): EventFilter;

    ChangedFallbackHandler(
      previousHandler: string | null,
      handler: string | null
    ): EventFilter;

    DisabledValidator(validator: null): EventFilter;

    EnabledValidator(validator: null): EventFilter;

    Initialized(version: null): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimateGas: {
    disableModule(
      prevValidator: string,
      validator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disableModule(address,address)"(
      prevValidator: string,
      validator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enableValidator(
      validator: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enableValidator(address,bytes)"(
      validator: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "entryPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(address,uint256,bytes)"(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeBatch(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeBatch(address[],uint256[],bytes[])"(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getFallbackHandler(overrides?: CallOverrides): Promise<BigNumber>;

    "getFallbackHandler()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorsPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValidatorsPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      defalutCallbackHandler: string,
      validators: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address[],bytes[])"(
      defalutCallbackHandler: string,
      validators: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    isValidatorEnabled(
      validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidatorEnabled(address)"(
      validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "validateUserOp(tuple,bytes32,uint256)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    disableModule(
      prevValidator: string,
      validator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disableModule(address,address)"(
      prevValidator: string,
      validator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enableValidator(
      validator: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableValidator(address,bytes)"(
      validator: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "entryPoint()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(address,uint256,bytes)"(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeBatch(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeBatch(address[],uint256[],bytes[])"(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getFallbackHandler(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFallbackHandler()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNonce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorsPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValidatorsPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      defalutCallbackHandler: string,
      validators: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address[],bytes[])"(
      defalutCallbackHandler: string,
      validators: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isValidatorEnabled(
      validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidatorEnabled(address)"(
      validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "validateUserOp(tuple,bytes32,uint256)"(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
