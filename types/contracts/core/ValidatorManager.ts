/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ValidatorManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "disableModule"
      | "enableValidator"
      | "getValidatorsPaginated"
      | "isValidatorEnabled"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DisabledValidator" | "EnabledValidator"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "disableModule",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableValidator",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsPaginated",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorEnabled",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorEnabled",
    data: BytesLike
  ): Result;
}

export namespace DisabledValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnabledValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ValidatorManager extends BaseContract {
  connect(runner?: ContractRunner | null): ValidatorManager;
  waitForDeployment(): Promise<this>;

  interface: ValidatorManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  disableModule: TypedContractMethod<
    [prevValidator: AddressLike, validator: AddressLike],
    [void],
    "nonpayable"
  >;

  enableValidator: TypedContractMethod<
    [validator: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getValidatorsPaginated: TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;

  isValidatorEnabled: TypedContractMethod<
    [validator: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "disableModule"
  ): TypedContractMethod<
    [prevValidator: AddressLike, validator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableValidator"
  ): TypedContractMethod<
    [validator: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getValidatorsPaginated"
  ): TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidatorEnabled"
  ): TypedContractMethod<[validator: AddressLike], [boolean], "view">;

  getEvent(
    key: "DisabledValidator"
  ): TypedContractEvent<
    DisabledValidatorEvent.InputTuple,
    DisabledValidatorEvent.OutputTuple,
    DisabledValidatorEvent.OutputObject
  >;
  getEvent(
    key: "EnabledValidator"
  ): TypedContractEvent<
    EnabledValidatorEvent.InputTuple,
    EnabledValidatorEvent.OutputTuple,
    EnabledValidatorEvent.OutputObject
  >;

  filters: {
    "DisabledValidator(address)": TypedContractEvent<
      DisabledValidatorEvent.InputTuple,
      DisabledValidatorEvent.OutputTuple,
      DisabledValidatorEvent.OutputObject
    >;
    DisabledValidator: TypedContractEvent<
      DisabledValidatorEvent.InputTuple,
      DisabledValidatorEvent.OutputTuple,
      DisabledValidatorEvent.OutputObject
    >;

    "EnabledValidator(address)": TypedContractEvent<
      EnabledValidatorEvent.InputTuple,
      EnabledValidatorEvent.OutputTuple,
      EnabledValidatorEvent.OutputObject
    >;
    EnabledValidator: TypedContractEvent<
      EnabledValidatorEvent.InputTuple,
      EnabledValidatorEvent.OutputTuple,
      EnabledValidatorEvent.OutputObject
    >;
  };
}
